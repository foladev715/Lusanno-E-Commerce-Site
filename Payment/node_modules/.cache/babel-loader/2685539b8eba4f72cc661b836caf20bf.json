{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\folar\\\\OneDrive\\\\Desktop\\\\Software Development\\\\GoMyCode\\\\Final Project- E-Commerce Site\\\\payment\\\\src\\\\CheckoutForm.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { PaymentElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nexport default function CheckoutForm() {\n  const stripe = useStripe();\n  const elements = useElements();\n  const [message, setMessage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    if (!stripe) {\n      return;\n    }\n\n    const clientSecret = new URLSearchParams(window.location.search).get(\"payment_intent_client_secret\");\n\n    if (!clientSecret) {\n      return;\n    }\n\n    stripe.retrievePaymentIntent(clientSecret).then(_ref => {\n      let {\n        paymentIntent\n      } = _ref;\n\n      switch (paymentIntent.status) {\n        case \"succeeded\":\n          setMessage(\"Payment succeeded!\");\n          break;\n\n        case \"processing\":\n          setMessage(\"Your payment is processing.\");\n          break;\n\n        case \"requires_payment_method\":\n          setMessage(\"Your payment was not successful, please try again.\");\n          break;\n\n        default:\n          setMessage(\"Something went wrong.\");\n          break;\n      }\n    });\n  }, [stripe]);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    setIsLoading(true);\n    const {\n      error\n    } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        // Make sure to change this to your payment completion page\n        return_url: \"http://localhost:3000\"\n      }\n    }); // This point will only be reached if there is an immediate error when\n    // confirming the payment. Otherwise, your customer will be redirected to\n    // your `return_url`. For some payment methods like iDEAL, your customer will\n    // be redirected to an intermediate site first to authorize the payment, then\n    // redirected to the `return_url`.\n\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\n      setMessage(error.message);\n    } else {\n      setMessage(\"An unexpected error occurred.\");\n    }\n\n    setIsLoading(false);\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    id: \"payment-form\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(PaymentElement, {\n    id: \"payment-element\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: isLoading || !stripe || !elements,\n    id: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    id: \"button-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spinner\",\n    id: \"spinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 24\n    }\n  }) : \"Pay now\")), message && /*#__PURE__*/React.createElement(\"div\", {\n    id: \"payment-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 19\n    }\n  }, message));\n}","map":{"version":3,"names":["React","useEffect","useState","PaymentElement","useStripe","useElements","CheckoutForm","stripe","elements","message","setMessage","isLoading","setIsLoading","clientSecret","URLSearchParams","window","location","search","get","retrievePaymentIntent","then","paymentIntent","status","handleSubmit","e","preventDefault","error","confirmPayment","confirmParams","return_url","type"],"sources":["C:/Users/folar/OneDrive/Desktop/Software Development/GoMyCode/Final Project- E-Commerce Site/payment/src/CheckoutForm.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  PaymentElement,\n  useStripe,\n  useElements\n} from \"@stripe/react-stripe-js\";\n\nexport default function CheckoutForm() {\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const [message, setMessage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (!stripe) {\n      return;\n    }\n\n    const clientSecret = new URLSearchParams(window.location.search).get(\n      \"payment_intent_client_secret\"\n    );\n\n    if (!clientSecret) {\n      return;\n    }\n\n    stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\n      switch (paymentIntent.status) {\n        case \"succeeded\":\n          setMessage(\"Payment succeeded!\");\n          break;\n        case \"processing\":\n          setMessage(\"Your payment is processing.\");\n          break;\n        case \"requires_payment_method\":\n          setMessage(\"Your payment was not successful, please try again.\");\n          break;\n        default:\n          setMessage(\"Something went wrong.\");\n          break;\n      }\n    });\n  }, [stripe]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    setIsLoading(true);\n\n    const { error } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        // Make sure to change this to your payment completion page\n        return_url: \"http://localhost:3000\",\n      },\n    });\n\n    // This point will only be reached if there is an immediate error when\n    // confirming the payment. Otherwise, your customer will be redirected to\n    // your `return_url`. For some payment methods like iDEAL, your customer will\n    // be redirected to an intermediate site first to authorize the payment, then\n    // redirected to the `return_url`.\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\n      setMessage(error.message);\n    } else {\n      setMessage(\"An unexpected error occurred.\");\n    }\n\n    setIsLoading(false);\n  };\n\n  return (\n    <form id=\"payment-form\" onSubmit={handleSubmit}>\n      <PaymentElement id=\"payment-element\" />\n      <button disabled={isLoading || !stripe || !elements} id=\"submit\">\n        <span id=\"button-text\">\n          {isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : \"Pay now\"}\n        </span>\n      </button>\n      {/* Show any error or success messages */}\n      {message && <div id=\"payment-message\">{message}</div>}\n    </form>\n  );\n}"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SACEC,cADF,EAEEC,SAFF,EAGEC,WAHF,QAIO,yBAJP;AAMA,eAAe,SAASC,YAAT,GAAwB;EACrC,MAAMC,MAAM,GAAGH,SAAS,EAAxB;EACA,MAAMI,QAAQ,GAAGH,WAAW,EAA5B;EAEA,MAAM,CAACI,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,IAAD,CAAtC;EACA,MAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C;EAEAD,SAAS,CAAC,MAAM;IACd,IAAI,CAACM,MAAL,EAAa;MACX;IACD;;IAED,MAAMM,YAAY,GAAG,IAAIC,eAAJ,CAAoBC,MAAM,CAACC,QAAP,CAAgBC,MAApC,EAA4CC,GAA5C,CACnB,8BADmB,CAArB;;IAIA,IAAI,CAACL,YAAL,EAAmB;MACjB;IACD;;IAEDN,MAAM,CAACY,qBAAP,CAA6BN,YAA7B,EAA2CO,IAA3C,CAAgD,QAAuB;MAAA,IAAtB;QAAEC;MAAF,CAAsB;;MACrE,QAAQA,aAAa,CAACC,MAAtB;QACE,KAAK,WAAL;UACEZ,UAAU,CAAC,oBAAD,CAAV;UACA;;QACF,KAAK,YAAL;UACEA,UAAU,CAAC,6BAAD,CAAV;UACA;;QACF,KAAK,yBAAL;UACEA,UAAU,CAAC,oDAAD,CAAV;UACA;;QACF;UACEA,UAAU,CAAC,uBAAD,CAAV;UACA;MAZJ;IAcD,CAfD;EAgBD,CA7BQ,EA6BN,CAACH,MAAD,CA7BM,CAAT;;EA+BA,MAAMgB,YAAY,GAAG,MAAOC,CAAP,IAAa;IAChCA,CAAC,CAACC,cAAF;;IAEA,IAAI,CAAClB,MAAD,IAAW,CAACC,QAAhB,EAA0B;MACxB;MACA;MACA;IACD;;IAEDI,YAAY,CAAC,IAAD,CAAZ;IAEA,MAAM;MAAEc;IAAF,IAAY,MAAMnB,MAAM,CAACoB,cAAP,CAAsB;MAC5CnB,QAD4C;MAE5CoB,aAAa,EAAE;QACb;QACAC,UAAU,EAAE;MAFC;IAF6B,CAAtB,CAAxB,CAXgC,CAmBhC;IACA;IACA;IACA;IACA;;IACA,IAAIH,KAAK,CAACI,IAAN,KAAe,YAAf,IAA+BJ,KAAK,CAACI,IAAN,KAAe,kBAAlD,EAAsE;MACpEpB,UAAU,CAACgB,KAAK,CAACjB,OAAP,CAAV;IACD,CAFD,MAEO;MACLC,UAAU,CAAC,+BAAD,CAAV;IACD;;IAEDE,YAAY,CAAC,KAAD,CAAZ;EACD,CA/BD;;EAiCA,oBACE;IAAM,EAAE,EAAC,cAAT;IAAwB,QAAQ,EAAEW,YAAlC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE,oBAAC,cAAD;IAAgB,EAAE,EAAC,iBAAnB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADF,eAEE;IAAQ,QAAQ,EAAEZ,SAAS,IAAI,CAACJ,MAAd,IAAwB,CAACC,QAA3C;IAAqD,EAAE,EAAC,QAAxD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAM,EAAE,EAAC,aAAT;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACGG,SAAS,gBAAG;IAAK,SAAS,EAAC,SAAf;IAAyB,EAAE,EAAC,SAA5B;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAH,GAAkD,SAD9D,CADF,CAFF,EAQGF,OAAO,iBAAI;IAAK,EAAE,EAAC,iBAAR;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAA2BA,OAA3B,CARd,CADF;AAYD"},"metadata":{},"sourceType":"module"}